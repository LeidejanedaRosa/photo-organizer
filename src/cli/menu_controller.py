import os
from typing import Optional


class MenuController:
    """Respons√°vel por exibir menus e capturar entradas do usu√°rio."""
    
    @staticmethod
    def exibir_menu_inicial() -> int:
        """Exibe um menu inicial bonito e retorna a op√ß√£o escolhida."""
        print("=" * 70)
        print("üñºÔ∏è  ORGANIZADOR DE FOTOS  üñºÔ∏è")
        print("=" * 70)
        print()
        print("üìã FUNCIONALIDADES DISPON√çVEIS:")
        print("   1Ô∏è‚É£  Detectar e mover duplicatas")
        print("   2Ô∏è‚É£  Ordenar fotos por data")
        print("   3Ô∏è‚É£  Fazer tudo (duplicatas + ordena√ß√£o)")
        print("   4Ô∏è‚É£  Relat√≥rio detalhado")
        print("   5Ô∏è‚É£  Buscar fotos por per√≠odo")
        print("   6Ô∏è‚É£  Organizar por eventos")
        print("   7Ô∏è‚É£  Organizar por per√≠odos customizados")
        print("   8Ô∏è‚É£  Criar backup do estado atual")
        print("   9Ô∏è‚É£  Como voc√™ quer nomear suas fotos?")
        print()
        print("üéØ NOMENCLATURA CONFIGUR√ÅVEL:")
        print("   üìÖ Sistema flex√≠vel - configure suas prefer√™ncias")
        print("   üìù Padr√£o compat√≠vel com sistema anterior dispon√≠vel")
        print("   üóìÔ∏è Per√≠odos e datas totalmente personaliz√°veis")
        print()
        print("=" * 70)
        
        while True:
            try:
                opcao = input("\nüî¢ Escolha uma op√ß√£o (1-9): ").strip()
                if opcao in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:
                    return int(opcao)
                else:
                    print("‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a 9.")
            except KeyboardInterrupt:
                print("\n\nüëã Opera√ß√£o cancelada pelo usu√°rio.")
                exit(0)
    
    @staticmethod
    def solicitar_diretorio() -> str:
        """Solicita o diret√≥rio das fotos."""
        print("\nüìÅ CONFIGURA√á√ÉO DO DIRET√ìRIO:")
        
        while True:
            caminho = input("üìÅ Digite o caminho do diret√≥rio: ").strip()
            if caminho and os.path.exists(caminho):
                return caminho
            elif not caminho:
                print("‚ùå Por favor, digite um caminho v√°lido!")
            else:
                print("‚ùå Diret√≥rio n√£o encontrado! Tente novamente.")
    
    @staticmethod
    def confirmar_operacao(mensagem: str) -> bool:
        """Solicita confirma√ß√£o do usu√°rio para uma opera√ß√£o."""
        resposta = input(f"\n‚ùì {mensagem} (s/N): ").strip().lower()
        return resposta == 's'
    
    @staticmethod
    def solicitar_periodo() -> tuple[str, str]:
        """Solicita per√≠odo de datas do usu√°rio."""
        print("üìÖ Digite o per√≠odo desejado:")
        data_inicio = input("   üìÜ Data in√≠cio (DD/MM/AAAA): ").strip()
        data_fim = input("   üìÜ Data fim (DD/MM/AAAA): ").strip()
        return data_inicio, data_fim
    
    @staticmethod
    def imprimir_separador(titulo: Optional[str] = None) -> None:
        """Imprime um separador visual."""
        print("\n" + "=" * 70)
        if titulo:
            print(titulo)
            print("=" * 70)
    
    @staticmethod
    def imprimir_conclusao() -> None:
        """Imprime mensagem de conclus√£o."""
        print("\n" + "=" * 70)
        print("‚úÖ OPERA√á√ÉO CONCLU√çDA!")
        print("=" * 70)
