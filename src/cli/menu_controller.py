import os
from typing import Optional, Tuple


class MenuController:

    @staticmethod
    def display_smart_menu(
        has_organized_photos: bool, has_configuration: bool
    ) -> int:

        print("=" * 70)
        print("üñºÔ∏è  ORGANIZADOR DE FOTOS  üñºÔ∏è")
        print("=" * 70)
        print()

        if not has_organized_photos:

            print("ÔøΩ PRIMEIROS PASSOS:")
            print("   1Ô∏è‚É£  Configurar como nomear suas fotos")
            print("   2Ô∏è‚É£  Remover fotos duplicadas")
            print("   3Ô∏è‚É£  Organizar fotos em ordem cronol√≥gica")
            print("   4Ô∏è‚É£  Fazer tudo (duplicatas + renomea√ß√£o)")
            print()
            print("üìä INFORMA√á√ïES:")
            print("   5Ô∏è‚É£  Ver relat√≥rio das suas fotos")
            valid_options = ["1", "2", "3", "4", "5"]
            max_option = 5
        else:

            print("üîß ORGANIZA√á√ÉO:")
            if has_configuration:
                print("   1Ô∏è‚É£  Reconfigurar nomenclatura das fotos")
            else:
                print("   1Ô∏è‚É£  Configurar nomenclatura das fotos")
            print("   2Ô∏è‚É£  Remover fotos duplicadas")
            print("   3Ô∏è‚É£  Organizar fotos em ordem cronol√≥gica")
            print("   4Ô∏è‚É£  Fazer tudo (duplicatas + renomea√ß√£o)")
            print()
            print("üìÅ ORGANIZAR EM PASTAS:")
            print("   5Ô∏è‚É£  Criar pastas por events nas fotos")
            print("   6Ô∏è‚É£  Criar pastas por per√≠odos personalizados")
            print()
            print("üîç BUSCA E RELAT√ìRIOS:")
            print("   7Ô∏è‚É£  Buscar fotos por per√≠odo espec√≠fico")
            print("   8Ô∏è‚É£  Ver relat√≥rio detalhado")
            print()
            print("üíæ BACKUP:")
            print("   9Ô∏è‚É£  Criar backup do estado atual")
            valid_options = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
            max_option = 9

        print("=" * 70)

        while True:
            try:
                option = input(
                    f"\nüî¢ Escolha uma op√ß√£o (1-{max_option}): "
                ).strip()
                if option in valid_options:
                    return int(option)
                else:
                    print(
                        f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {max_option}."
                    )
            except KeyboardInterrupt:
                print("\n\nüëã Opera√ß√£o cancelada pelo usu√°rio.")
                exit(0)

    @staticmethod
    def request_directory() -> str:

        print("\nüìÅ CONFIGURA√á√ÉO DO DIRET√ìRIO:")

        while True:
            path = input("üìÅ Digite o caminho do diret√≥rio: ").strip()
            if path and os.path.exists(path):
                return path
            elif not path:
                print("‚ùå Por favor, digite um caminho v√°lido!")
            else:
                print("‚ùå Diret√≥rio n√£o encontrado! Tente novamente.")

    @staticmethod
    def confirm_operation(message: str) -> bool:

        response = input(f"\n‚ùì {message} (s/N): ").strip().lower()
        return response == "s"

    @staticmethod
    def request_period() -> Tuple[str, str]:

        print("üìÖ Digite o per√≠odo desejado:")
        start_date = input("   üìÜ Data in√≠cio (DD/MM/AAAA): ").strip()
        end_date = input("   üìÜ Data fim (DD/MM/AAAA): ").strip()
        return start_date, end_date

    @staticmethod
    def print_separator(title: Optional[str] = None) -> None:

        print("\n" + "=" * 70)
        if title:
            print(title)
            print("=" * 70)

    @staticmethod
    def print_conclusion() -> None:

        print("\n" + "=" * 70)
        print("‚úÖ OPERA√á√ÉO CONCLU√çDA!")
        print("=" * 70)
