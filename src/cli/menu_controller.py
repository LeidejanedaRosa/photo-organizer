import os
from typing import Optional

class MenuController:
    
    @staticmethod
    def exibir_menu_inteligente(tem_fotos_organizadas: bool, tem_configuracao: bool) -> int:
        
        print("=" * 70)
        print("üñºÔ∏è  ORGANIZADOR DE FOTOS  üñºÔ∏è")
        print("=" * 70)
        print()
        
        if not tem_fotos_organizadas:
            
            print("ÔøΩ PRIMEIROS PASSOS:")
            print("   1Ô∏è‚É£  Configurar como nomear suas fotos")
            print("   2Ô∏è‚É£  Remover fotos duplicadas")  
            print("   3Ô∏è‚É£  Organizar fotos em ordem cronol√≥gica")
            print("   4Ô∏è‚É£  Fazer tudo (duplicatas + renomea√ß√£o)")
            print()
            print("üìä INFORMA√á√ïES:")
            print("   5Ô∏è‚É£  Ver relat√≥rio das suas fotos")
            opcoes_validas = ['1', '2', '3', '4', '5']
            max_opcao = 5
        else:
            
            print("üîß ORGANIZA√á√ÉO:")
            print("   1Ô∏è‚É£  Configurar nomenclatura das fotos")
            print("   2Ô∏è‚É£  Remover fotos duplicadas")
            print("   3Ô∏è‚É£  Organizar fotos em ordem cronol√≥gica") 
            print("   4Ô∏è‚É£  Fazer tudo (duplicatas + renomea√ß√£o)")
            print()
            print("üìÅ ORGANIZAR EM PASTAS:")
            print("   5Ô∏è‚É£  Criar pastas por eventos nas fotos")
            print("   6Ô∏è‚É£  Criar pastas por per√≠odos personalizados")
            print()
            print("üîç BUSCA E RELAT√ìRIOS:")
            print("   7Ô∏è‚É£  Buscar fotos por per√≠odo espec√≠fico")
            print("   8Ô∏è‚É£  Ver relat√≥rio detalhado")
            print()
            print("üíæ BACKUP:")
            print("   9Ô∏è‚É£  Criar backup do estado atual")
            opcoes_validas = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
            max_opcao = 9
        
        print("=" * 70)
        
        while True:
            try:
                opcao = input(f"\nüî¢ Escolha uma op√ß√£o (1-{max_opcao}): ").strip()
                if opcao in opcoes_validas:
                    return int(opcao)
                else:
                    print(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {max_opcao}.")
            except KeyboardInterrupt:
                print("\n\nüëã Opera√ß√£o cancelada pelo usu√°rio.")
                exit(0)
    
    @staticmethod
    def solicitar_diretorio() -> str:
        
        print("\nüìÅ CONFIGURA√á√ÉO DO DIRET√ìRIO:")
        
        while True:
            caminho = input("üìÅ Digite o caminho do diret√≥rio: ").strip()
            if caminho and os.path.exists(caminho):
                return caminho
            elif not caminho:
                print("‚ùå Por favor, digite um caminho v√°lido!")
            else:
                print("‚ùå Diret√≥rio n√£o encontrado! Tente novamente.")
    
    @staticmethod
    def confirmar_operacao(mensagem: str) -> bool:
        
        resposta = input(f"\n‚ùì {mensagem} (s/N): ").strip().lower()
        return resposta == 's'
    
    @staticmethod
    def solicitar_periodo() -> tuple[str, str]:
        
        print("üìÖ Digite o per√≠odo desejado:")
        data_inicio = input("   üìÜ Data in√≠cio (DD/MM/AAAA): ").strip()
        data_fim = input("   üìÜ Data fim (DD/MM/AAAA): ").strip()
        return data_inicio, data_fim
    
    @staticmethod
    def imprimir_separador(titulo: Optional[str] = None) -> None:
        
        print("\n" + "=" * 70)
        if titulo:
            print(titulo)
            print("=" * 70)
    
    @staticmethod
    def imprimir_conclusao() -> None:
        
        print("\n" + "=" * 70)
        print("‚úÖ OPERA√á√ÉO CONCLU√çDA!")
        print("=" * 70)